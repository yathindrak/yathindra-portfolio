{
    "status": "ok",
    "feed": {
      "url": "https://medium.com/feed/@yathindra",
      "title": "Stories by Yathindra Kodithuwakku on Medium",
      "link": "https://medium.com/@yathindra?source=rss-6d1990a34654------2",
      "author": "",
      "description": "Stories by Yathindra Kodithuwakku on Medium",
      "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*hhXMc6toKSUJkJQJ37BMvQ.png"
    },
    "items": [
      {
        "title": "Secure your GatsbyJS Application with Asgardeo",
        "pubDate": "2022-06-18 09:55:27",
        "link": "https://medium.com/identity-beyond-borders/secure-your-gatsbyjs-application-with-asgardeo-e1f6cdea9dbc?source=rss-6d1990a34654------2",
        "guid": "https://medium.com/p/e1f6cdea9dbc",
        "author": "Yathindra Kodithuwakku",
        "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*YV6VXD19ylVJfWegXauTbg.png",
        "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YV6VXD19ylVJfWegXauTbg.png\"></figure><h4>TL;DR</h4>\n<p>Gatsby is a modern React based open-source static content generator, and it allows the development of performant web apps. In the article, we will be implementing authentication using Asgardeo for a Gatsby application in a few steps.</p>\n<blockquote><em>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</em></blockquote>\n<h3>1). Register an application from the Asgardeo console.</h3>\n<ol>\n<li>Login to <a href=\"https://console.asgardeo.io/\">Asgardeo Console</a>.</li>\n<li>Navigate to <strong>Develop</strong> tab and go to <strong>Applications</strong>.</li>\n<li>Click new Application and choose<strong> Single Page application</strong>.</li>\n<li>In the application setting provide <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">h</a>ttps://localhost:8000 as the <strong>Authorized redirect URL</strong> and <strong>Allowed origins</strong>.</li>\n<li>Then navigate to the <strong>Protocol</strong> tab and get your <strong>Client ID.</strong>\n</li>\n</ol>\n<h3>2). Allow users to perform self-registration.</h3>\n<ol>\n<li>Navigate to the Manage tab and go to Self Registration.</li>\n<li>Switch on Self Registration.</li>\n</ol>\n<p>That’s all on the Asgardeo application setup. Let’s move forward with building our Gatsby App.</p>\n<h3>3). Create Gatsby Application</h3>\n<p>Create a Gatsby application using the following command.</p>\n<pre>gatsby new</pre>\n<p>Then add Asgardeo react SDK as a dependency.</p>\n<pre>npm install @asgardeo/auth-react --save</pre>\n<p>In the <strong><em>gatsby-browser.tsx</em></strong>, let’s wrap the <strong><em>root element</em></strong> parameter from a wrapper called PageLayout as follows.</p>\n<a href=\"https://medium.com/media/962d4e47e04de4068ba5c3cf7633cafe/href\">https://medium.com/media/962d4e47e04de4068ba5c3cf7633cafe/href</a><p>Let us now add the AuthProvider with the Client ID and the Organization name into the PageLayout as follows.</p>\n<a href=\"https://medium.com/media/8352c2d491af39dbe661c5af365f9900/href\">https://medium.com/media/8352c2d491af39dbe661c5af365f9900/href</a><p>Great! Since we Provided the AuthProvider, now we can use use the Auth Context as follows.</p>\n<a href=\"https://medium.com/media/4979ef413e2214f9d9f315b0da2497df/href\">https://medium.com/media/4979ef413e2214f9d9f315b0da2497df/href</a><p><strong>Cheers..!! You have implemented authentication in your Gatsby application </strong>🎉</p>\n<p>Hope you have gained some knowledge on developing a secured Gatsby application with Asgardeo.</p>\n<p>Find the code for the Gatsby sample application with discussed functionalities. — <a href=\"https://github.com/yathindrakodithuwakku/asgardeo-gatsby-demo\">https://github.com/yathindrakodithuwakku/asgardeo-gatsby-demo</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e1f6cdea9dbc\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/secure-your-gatsbyjs-application-with-asgardeo-e1f6cdea9dbc\">Secure your GatsbyJS Application with Asgardeo</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YV6VXD19ylVJfWegXauTbg.png\"></figure><h4>TL;DR</h4>\n<p>Gatsby is a modern React based open-source static content generator, and it allows the development of performant web apps. In the article, we will be implementing authentication using Asgardeo for a Gatsby application in a few steps.</p>\n<blockquote><em>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</em></blockquote>\n<h3>1). Register an application from the Asgardeo console.</h3>\n<ol>\n<li>Login to <a href=\"https://console.asgardeo.io/\">Asgardeo Console</a>.</li>\n<li>Navigate to <strong>Develop</strong> tab and go to <strong>Applications</strong>.</li>\n<li>Click new Application and choose<strong> Single Page application</strong>.</li>\n<li>In the application setting provide <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">h</a>ttps://localhost:8000 as the <strong>Authorized redirect URL</strong> and <strong>Allowed origins</strong>.</li>\n<li>Then navigate to the <strong>Protocol</strong> tab and get your <strong>Client ID.</strong>\n</li>\n</ol>\n<h3>2). Allow users to perform self-registration.</h3>\n<ol>\n<li>Navigate to the Manage tab and go to Self Registration.</li>\n<li>Switch on Self Registration.</li>\n</ol>\n<p>That’s all on the Asgardeo application setup. Let’s move forward with building our Gatsby App.</p>\n<h3>3). Create Gatsby Application</h3>\n<p>Create a Gatsby application using the following command.</p>\n<pre>gatsby new</pre>\n<p>Then add Asgardeo react SDK as a dependency.</p>\n<pre>npm install @asgardeo/auth-react --save</pre>\n<p>In the <strong><em>gatsby-browser.tsx</em></strong>, let’s wrap the <strong><em>root element</em></strong> parameter from a wrapper called PageLayout as follows.</p>\n<a href=\"https://medium.com/media/962d4e47e04de4068ba5c3cf7633cafe/href\">https://medium.com/media/962d4e47e04de4068ba5c3cf7633cafe/href</a><p>Let us now add the AuthProvider with the Client ID and the Organization name into the PageLayout as follows.</p>\n<a href=\"https://medium.com/media/8352c2d491af39dbe661c5af365f9900/href\">https://medium.com/media/8352c2d491af39dbe661c5af365f9900/href</a><p>Great! Since we Provided the AuthProvider, now we can use use the Auth Context as follows.</p>\n<a href=\"https://medium.com/media/4979ef413e2214f9d9f315b0da2497df/href\">https://medium.com/media/4979ef413e2214f9d9f315b0da2497df/href</a><p><strong>Cheers..!! You have implemented authentication in your Gatsby application </strong>🎉</p>\n<p>Hope you have gained some knowledge on developing a secured Gatsby application with Asgardeo.</p>\n<p>Find the code for the Gatsby sample application with discussed functionalities. — <a href=\"https://github.com/yathindrakodithuwakku/asgardeo-gatsby-demo\">https://github.com/yathindrakodithuwakku/asgardeo-gatsby-demo</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e1f6cdea9dbc\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/secure-your-gatsbyjs-application-with-asgardeo-e1f6cdea9dbc\">Secure your GatsbyJS Application with Asgardeo</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "enclosure": {},
        "categories": [
          "gatsby",
          "asgardeo",
          "gatsbyjs",
          "wso2",
          "authentication"
        ]
      },
      {
        "title": "Performance optimization techniques we are using in Asgardeo — Part 02",
        "pubDate": "2022-03-17 16:28:54",
        "link": "https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-02-d2eedacc5f3e?source=rss-6d1990a34654------2",
        "guid": "https://medium.com/p/d2eedacc5f3e",
        "author": "Yathindra Kodithuwakku",
        "thumbnail": "https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png",
        "description": "\n<h3>Performance optimization techniques we are using in Asgardeo — Part 02</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png\"><figcaption>Asgardeo — Identity as a Service (IDaaS)</figcaption></figure><p>This is the part 02 of the series. Therefore, if you didn’t go through the part 01 of the series, highly recommended for you to go through the part 01 first.</p>\n<p>In this article lets focus on the techniques used in the react and webpack for performance optimization.</p>\n<h3>Things we have done on Webpack configurations. ✨</h3>\n<h4>1. Using production over development mode</h4>\n<p>By using production mode itself provides built-in optimization by webpack. It includes modification, tree-shaking, etc. Additionally `<em>env.NODE_ENV</em>` environment variable can make used to set up the environment to ‘production’.</p>\n<p>With production mode, if the bundle is analyzed with <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">bundle-analyzer-plugin</a> it clearly shows that bundle size is drastically reduced in the production mode compared to development.</p>\n<p>Furthermore, when the production mode is enabled we perform compression using Brotli plugin along with a fallback for Gzip.</p>\n<h4>2. Bundle splitting using SplitChunks plugin</h4>\n<p>Generally, webpack builds a single bundle.js file with the bundled javascript. The SplitChunks plugin chunks the bundle into multiple chunks.</p>\n<pre>// webpack.config.js</pre>\n<pre>module.exports = {<br>  //...<br>  optimization: {<br>    splitChunks: {<br>      // include all types of chunks<br>      chunks: 'all',<br>    },<br>  },<br>};</pre>\n<p>As mentioned in the webpack documentation:</p>\n<blockquote><em>“Providing all can be particularly powerful, because it means that chunks can be shared even between async and non-async chunks”</em></blockquote>\n<p>Even though this step doesn’t reduce the bundle size, now its possible to cache common chunks across pages.</p>\n<h4>3. Minify i18n internationalization JSON files</h4>\n<p>We use <em>json-minimizer-webpack-plugin</em> along with a JSON loader to minify JSON files. It reduced file size and the loading time of these files in 50%.</p>\n<h4>4. Server-side caching</h4>\n<p>Server side caching is used only for caching static assets. In this case, a special thing to note is, in the SplitChunks plugin it names each file name with a hash based on the content in each chunk. It helps to maintain a serverside caching mechanism as in each build and deployment it generates a new hash for each chunk file name.</p>\n<p>Furthermore, we use a cache purging mechanism once a deployment is done to avoid anomalies in serverside caching.</p>\n<h3>Things we have done under React source code. ✨</h3>\n<h4>1. Make use of memoization</h4>\n<p>Memoization allows kinda caching the values of expensive or recursive function invocations. In that case, when the same function is invoked next time, with the same parameters, the previously cached values are returned over re-computation.</p>\n<p>There are two ways to perform memoization:</p>\n<ol>\n<li>Component memoizing using <em>React.memo()</em> Higher Order Component(HOC).</li>\n<li>Use <em>useMemo()</em> react hook in order to wrap functions within a component.</li>\n</ol>\n<h4>2. Lazy loading components</h4>\n<p>When we have some components, which is quite fine to load after loading the main content, we can make use of <em>React.lazy() </em>to lazy load those components.</p>\n<p>Also, react suspense can be used to display a loader kind of component until the lazy-loaded component gets loaded.</p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>Cheers <a href=\"https://emojipedia.org/party-popper/\">🎉</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d2eedacc5f3e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-02-d2eedacc5f3e\">Performance optimization techniques we are using in Asgardeo — Part 02</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "content": "\n<h3>Performance optimization techniques we are using in Asgardeo — Part 02</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png\"><figcaption>Asgardeo — Identity as a Service (IDaaS)</figcaption></figure><p>This is the part 02 of the series. Therefore, if you didn’t go through the part 01 of the series, highly recommended for you to go through the part 01 first.</p>\n<p>In this article lets focus on the techniques used in the react and webpack for performance optimization.</p>\n<h3>Things we have done on Webpack configurations. ✨</h3>\n<h4>1. Using production over development mode</h4>\n<p>By using production mode itself provides built-in optimization by webpack. It includes modification, tree-shaking, etc. Additionally `<em>env.NODE_ENV</em>` environment variable can make used to set up the environment to ‘production’.</p>\n<p>With production mode, if the bundle is analyzed with <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">bundle-analyzer-plugin</a> it clearly shows that bundle size is drastically reduced in the production mode compared to development.</p>\n<p>Furthermore, when the production mode is enabled we perform compression using Brotli plugin along with a fallback for Gzip.</p>\n<h4>2. Bundle splitting using SplitChunks plugin</h4>\n<p>Generally, webpack builds a single bundle.js file with the bundled javascript. The SplitChunks plugin chunks the bundle into multiple chunks.</p>\n<pre>// webpack.config.js</pre>\n<pre>module.exports = {<br>  //...<br>  optimization: {<br>    splitChunks: {<br>      // include all types of chunks<br>      chunks: 'all',<br>    },<br>  },<br>};</pre>\n<p>As mentioned in the webpack documentation:</p>\n<blockquote><em>“Providing all can be particularly powerful, because it means that chunks can be shared even between async and non-async chunks”</em></blockquote>\n<p>Even though this step doesn’t reduce the bundle size, now its possible to cache common chunks across pages.</p>\n<h4>3. Minify i18n internationalization JSON files</h4>\n<p>We use <em>json-minimizer-webpack-plugin</em> along with a JSON loader to minify JSON files. It reduced file size and the loading time of these files in 50%.</p>\n<h4>4. Server-side caching</h4>\n<p>Server side caching is used only for caching static assets. In this case, a special thing to note is, in the SplitChunks plugin it names each file name with a hash based on the content in each chunk. It helps to maintain a serverside caching mechanism as in each build and deployment it generates a new hash for each chunk file name.</p>\n<p>Furthermore, we use a cache purging mechanism once a deployment is done to avoid anomalies in serverside caching.</p>\n<h3>Things we have done under React source code. ✨</h3>\n<h4>1. Make use of memoization</h4>\n<p>Memoization allows kinda caching the values of expensive or recursive function invocations. In that case, when the same function is invoked next time, with the same parameters, the previously cached values are returned over re-computation.</p>\n<p>There are two ways to perform memoization:</p>\n<ol>\n<li>Component memoizing using <em>React.memo()</em> Higher Order Component(HOC).</li>\n<li>Use <em>useMemo()</em> react hook in order to wrap functions within a component.</li>\n</ol>\n<h4>2. Lazy loading components</h4>\n<p>When we have some components, which is quite fine to load after loading the main content, we can make use of <em>React.lazy() </em>to lazy load those components.</p>\n<p>Also, react suspense can be used to display a loader kind of component until the lazy-loaded component gets loaded.</p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>Cheers <a href=\"https://emojipedia.org/party-popper/\">🎉</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d2eedacc5f3e\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-02-d2eedacc5f3e\">Performance optimization techniques we are using in Asgardeo — Part 02</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "enclosure": {},
        "categories": [
          "asgardeo",
          "performance",
          "authentication",
          "identity",
          "react"
        ]
      },
      {
        "title": "Performance optimization techniques we are using in Asgardeo — Part 01",
        "pubDate": "2022-03-17 16:26:48",
        "link": "https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-01-fa436327c618?source=rss-6d1990a34654------2",
        "guid": "https://medium.com/p/fa436327c618",
        "author": "Yathindra Kodithuwakku",
        "thumbnail": "https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png",
        "description": "\n<h3>Performance optimization techniques we are using in Asgardeo — Part 01</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png\"><figcaption>Asgardeo — Identity as a Service (IDaaS)</figcaption></figure><p>This article introduces the techniques we adopted to our application in improving performance. This information will also help you to adopt these techniques to your projects as needed. Additionally, please note that this article series covers in frontend aspect only.</p>\n<blockquote>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</blockquote>\n<p>If I brief on the implementation, the Asgardeo frontend is developed mainly using react with custom webpack configurations. Then the app renders using a tomcat server as there are some JSP-related pages as well, which will be migrated in the future ;). Therefore, the react app is served under a JSP page.</p>\n<blockquote>Improving performance plays a key role in improving the user experience. Based on a study done by Akamai, 1 second latency cause 7% reduction in conversions in a web solution.</blockquote>\n<p><strong>In this article series, I will explain the techniques we used from JSP, React as well as Webpack point of view, to improve asgardeo performance.</strong></p>\n<h3>Things we have done on JSP pages. ✨</h3>\n<h4>1. Separate out authentication status verification to a separate component.</h4>\n<p>As mentioned earlier, the react application for the asgardeo console is rendered via a JSP page(let’s name this as home.jsp). If we consider a scenario where an unauthenticated user tries to access the home.jsp it loads the entire react bundle chunks (will discuss more on this later ;)), and some other assets irrespective of the authentication status. The concern is all of these assets are not required to check the login status. Therefore, we separated out the authentication verification with a new JSP (Lets name this index.jsp). In this case, based on the authentication status, the user will be redirected to the home.jsp which holds the react app.</p>\n<p>By using this architectural change, we could improve our login page loading time by 41% as well as could reduce JS file sizes by 13%.</p>\n<p><strong>2. Minification of JS libraries.</strong></p>\n<p>Previously we had some js assets such as jquery in JSP pages, that aren’t using the minified version which contains white spaces. Therefore those are also replaced with the minified versions to gain performance.</p>\n<p><strong>3. Delay loading of analytics libraries</strong></p>\n<p>The analytics and metrics libraries that we use for Application Performance Monitoring(APM) and to collect useful information, are loaded in a lazy manner by providing the priority to content.</p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>In the part 02 of the series, let's discuss what are the techniques we are using in React.js as well as Webpack configurations we are using in order to improve the frontend performance.</p>\n<p><a href=\"https://yathindra.medium.com/performance-optimization-techniques-we-are-using-in-asgardeo-part-02-d2eedacc5f3e\">Performance optimization techniques we are using in Asgardeo — Part 02</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fa436327c618\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-01-fa436327c618\">Performance optimization techniques we are using in Asgardeo — Part 01</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "content": "\n<h3>Performance optimization techniques we are using in Asgardeo — Part 01</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*tD_k4VbQDq7HYb27EXK6FA.png\"><figcaption>Asgardeo — Identity as a Service (IDaaS)</figcaption></figure><p>This article introduces the techniques we adopted to our application in improving performance. This information will also help you to adopt these techniques to your projects as needed. Additionally, please note that this article series covers in frontend aspect only.</p>\n<blockquote>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</blockquote>\n<p>If I brief on the implementation, the Asgardeo frontend is developed mainly using react with custom webpack configurations. Then the app renders using a tomcat server as there are some JSP-related pages as well, which will be migrated in the future ;). Therefore, the react app is served under a JSP page.</p>\n<blockquote>Improving performance plays a key role in improving the user experience. Based on a study done by Akamai, 1 second latency cause 7% reduction in conversions in a web solution.</blockquote>\n<p><strong>In this article series, I will explain the techniques we used from JSP, React as well as Webpack point of view, to improve asgardeo performance.</strong></p>\n<h3>Things we have done on JSP pages. ✨</h3>\n<h4>1. Separate out authentication status verification to a separate component.</h4>\n<p>As mentioned earlier, the react application for the asgardeo console is rendered via a JSP page(let’s name this as home.jsp). If we consider a scenario where an unauthenticated user tries to access the home.jsp it loads the entire react bundle chunks (will discuss more on this later ;)), and some other assets irrespective of the authentication status. The concern is all of these assets are not required to check the login status. Therefore, we separated out the authentication verification with a new JSP (Lets name this index.jsp). In this case, based on the authentication status, the user will be redirected to the home.jsp which holds the react app.</p>\n<p>By using this architectural change, we could improve our login page loading time by 41% as well as could reduce JS file sizes by 13%.</p>\n<p><strong>2. Minification of JS libraries.</strong></p>\n<p>Previously we had some js assets such as jquery in JSP pages, that aren’t using the minified version which contains white spaces. Therefore those are also replaced with the minified versions to gain performance.</p>\n<p><strong>3. Delay loading of analytics libraries</strong></p>\n<p>The analytics and metrics libraries that we use for Application Performance Monitoring(APM) and to collect useful information, are loaded in a lazy manner by providing the priority to content.</p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>In the part 02 of the series, let's discuss what are the techniques we are using in React.js as well as Webpack configurations we are using in order to improve the frontend performance.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fa436327c618\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/performance-optimization-techniques-we-are-using-in-asgardeo-part-01-fa436327c618\">Performance optimization techniques we are using in Asgardeo — Part 01</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "enclosure": {},
        "categories": [
          "performance",
          "react",
          "authentication",
          "identity",
          "asgardeo"
        ]
      },
      {
        "title": "Secure your Next.JS Application with Asgardeo and Next-Auth",
        "pubDate": "2022-02-05 11:09:18",
        "link": "https://medium.com/identity-beyond-borders/secure-your-next-js-application-with-asgardeo-and-next-auth-4c6ec1b551ea?source=rss-6d1990a34654------2",
        "guid": "https://medium.com/p/4c6ec1b551ea",
        "author": "Yathindra Kodithuwakku",
        "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*rfAFymmbedZJM9VCkSbZqw.png",
        "description": "\n<h3>Secure your Next.JS Application with Asgardeo and Next-Auth</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rfAFymmbedZJM9VCkSbZqw.png\"></figure><p>In the article, I will be implementing authentication using Asgardeo for a Next.JS application in few steps. Since the Asgardeo official react SDK is not supported for SSR I will be using NextAuth as the authentication library with Asgardeo.</p>\n<blockquote>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</blockquote>\n<p>Further in this article I will not dig deeper into authentication concepts and Next.JS or React related concepts and will focus on the Asgardeo-Nextjs integration.</p>\n<p>Let’s first prepare the application in Asgardeo.</p>\n<h4>1). Register an application from the Asgardeo console.</h4>\n<ol>\n<li>Login to <a href=\"https://console.asgardeo.io/\">Asgardeo Console</a>.</li>\n<li>Navigate to <strong>Develop</strong> tab and go to <strong>Applications</strong>.</li>\n<li>Click new Application and choose<strong> Standard based application</strong>.</li>\n<li>Then provide a name for the app and choose <strong>OpenIDConnect</strong>.</li>\n<li>In the application setting provide Authorized redirect URL as <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">{YOUR_APP_DOMAIN}/api/auth/callback/asgardeo</a>. E.g <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">http://localhost:3000/api/auth/callback/asgardeo</a>\n</li>\n<li>Also select <em>code</em> under <strong>Allowed grant types</strong>.</li>\n<li>The application domain put in the step 4 also need to be added under <strong>Allowed origins</strong>. E.g <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">http://localhost:3000</a>\n</li>\n<li>Then navigate to <strong>Protocol</strong> tab and get your <strong>Client ID</strong> and <strong>Client Secret.</strong>\n</li>\n</ol>\n<h4>2). Allow users to perform self registration.</h4>\n<ol>\n<li>Navigate to Manage tab and go to Self Registration.</li>\n<li>Switch on Self Registration.</li>\n</ol>\n<p>That’s all on Asgardeo application setup. Let’s move forward with building our Next.js App.</p>\n<h4>3). Create Next.Js Application</h4>\n<p>Create Next.JS application using the following command.</p>\n<pre>yarn create next-app</pre>\n<p>Then add next-auth dependency.</p>\n<pre>yarn add next-auth</pre>\n<p>Add the following environment variables in .env file</p>\n<blockquote>NEXTAUTH_URL=&lt;Your Application domain e.g. http://localhost:3000&gt;</blockquote>\n<blockquote>SECRET=&lt;Your Secret&gt;</blockquote>\n<blockquote>ASGARDEO_CLIENT_ID=&lt;Client ID taken from Asgardeo console&gt;</blockquote>\n<blockquote>ASGARDEO_CLIENT_SECRET=&lt;Client Secret taken from Asgardeo console&gt;</blockquote>\n<blockquote>ASGARDEO_SCOPES=openid email profile</blockquote>\n<blockquote>ASGARDEO_SERVER_ORIGIN=&lt;Server Origin&gt;</blockquote>\n<p>Since at the moment asgardeo auth provider is not available in the next-auth providers list, let’s create a custom provider.</p>\n<h4>4). Create a custom Next-Auth Provider</h4>\n<p>Create a file named <strong>[…nextauth].js</strong> under <em>pages/api/auth</em> path. In this file, we will adding next-auth related configurations. Thereafter the requests that will be reached<em> /api/auth/ </em>will be automatically handled by next-auth.</p>\n<a href=\"https://medium.com/media/24f3acbf470d7e946b2e48f9a9f6b71e/href\">https://medium.com/media/24f3acbf470d7e946b2e48f9a9f6b71e/href</a><p>In order add authentication functionalities to the application, first add the next-auth session provider to _app.js as follows.</p>\n<a href=\"https://medium.com/media/88f87cbd2917d6fde6d2e71461de39de/href\">https://medium.com/media/88f87cbd2917d6fde6d2e71461de39de/href</a><p>In index.js retrieve the user session object under getServerSideProps.</p>\n<pre>export async function getServerSideProps(context) {</pre>\n<pre>   return {</pre>\n<pre>      props: {</pre>\n<pre>          session: await getSession(context),</pre>\n<pre>      },</pre>\n<pre>    }</pre>\n<pre>}</pre>\n<p>Then you can access the session from your Next.JS page using</p>\n<blockquote><em>const { data: session, status } = useSession()</em></blockquote>\n<p>This session object can be used to access user information.</p>\n<p>Also to sign in, can invoke following function.</p>\n<blockquote>signIn(“asgardeo”, { callbackUrl: “/” })</blockquote>\n<p><strong>Cheers..!! You have implemented authentication in your next.js application </strong>🎉</p>\n<p>Hope you have gained some knowledge on developing secured nextjs application using NextAuth and Asgardeo.</p>\n<p>You can find below the Next.js sample application with discussed functionalities.</p>\n<p><a href=\"https://github.com/yathindrakodithuwakku/asgardeo-next-demo\">GitHub - yathindrakodithuwakku/asgardeo-next-demo</a></p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>Further you can deploy this app to <a href=\"https://vercel.com/\">vercel</a> with few clicks by also adding the mentioned environment variables in the vercel dashboard. ;-)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4c6ec1b551ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/secure-your-next-js-application-with-asgardeo-and-next-auth-4c6ec1b551ea\">Secure your Next.JS Application with Asgardeo and Next-Auth</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "content": "\n<h3>Secure your Next.JS Application with Asgardeo and Next-Auth</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rfAFymmbedZJM9VCkSbZqw.png\"></figure><p>In the article, I will be implementing authentication using Asgardeo for a Next.JS application in few steps. Since the Asgardeo official react SDK is not supported for SSR I will be using NextAuth as the authentication library with Asgardeo.</p>\n<blockquote>Asgardeo is an IDaaS empowering developers to build seamless login experiences in minutes as mentioned in the official website.</blockquote>\n<p>Further in this article I will not dig deeper into authentication concepts and Next.JS or React related concepts and will focus on the Asgardeo-Nextjs integration.</p>\n<p>Let’s first prepare the application in Asgardeo.</p>\n<h4>1). Register an application from the Asgardeo console.</h4>\n<ol>\n<li>Login to <a href=\"https://console.asgardeo.io/\">Asgardeo Console</a>.</li>\n<li>Navigate to <strong>Develop</strong> tab and go to <strong>Applications</strong>.</li>\n<li>Click new Application and choose<strong> Standard based application</strong>.</li>\n<li>Then provide a name for the app and choose <strong>OpenIDConnect</strong>.</li>\n<li>In the application setting provide Authorized redirect URL as <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">{YOUR_APP_DOMAIN}/api/auth/callback/asgardeo</a>. E.g <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">http://localhost:3000/api/auth/callback/asgardeo</a>\n</li>\n<li>Also select <em>code</em> under <strong>Allowed grant types</strong>.</li>\n<li>The application domain put in the step 4 also need to be added under <strong>Allowed origins</strong>. E.g <a href=\"http://localhost:3000/api/auth/callback/asgardeo\">http://localhost:3000</a>\n</li>\n<li>Then navigate to <strong>Protocol</strong> tab and get your <strong>Client ID</strong> and <strong>Client Secret.</strong>\n</li>\n</ol>\n<h4>2). Allow users to perform self registration.</h4>\n<ol>\n<li>Navigate to Manage tab and go to Self Registration.</li>\n<li>Switch on Self Registration.</li>\n</ol>\n<p>That’s all on Asgardeo application setup. Let’s move forward with building our Next.js App.</p>\n<h4>3). Create Next.Js Application</h4>\n<p>Create Next.JS application using the following command.</p>\n<pre>yarn create next-app</pre>\n<p>Then add next-auth dependency.</p>\n<pre>yarn add next-auth</pre>\n<p>Add the following environment variables in .env file</p>\n<blockquote>NEXTAUTH_URL=&lt;Your Application domain e.g. http://localhost:3000&gt;</blockquote>\n<blockquote>SECRET=&lt;Your Secret&gt;</blockquote>\n<blockquote>ASGARDEO_CLIENT_ID=&lt;Client ID taken from Asgardeo console&gt;</blockquote>\n<blockquote>ASGARDEO_CLIENT_SECRET=&lt;Client Secret taken from Asgardeo console&gt;</blockquote>\n<blockquote>ASGARDEO_SCOPES=openid email profile</blockquote>\n<blockquote>ASGARDEO_SERVER_ORIGIN=&lt;Server Origin&gt;</blockquote>\n<p>Since at the moment asgardeo auth provider is not available in the next-auth providers list, let’s create a custom provider.</p>\n<h4>4). Create a custom Next-Auth Provider</h4>\n<p>Create a file named <strong>[…nextauth].js</strong> under <em>pages/api/auth</em> path. In this file, we will adding next-auth related configurations. Thereafter the requests that will be reached<em> /api/auth/ </em>will be automatically handled by next-auth.</p>\n<a href=\"https://medium.com/media/24f3acbf470d7e946b2e48f9a9f6b71e/href\">https://medium.com/media/24f3acbf470d7e946b2e48f9a9f6b71e/href</a><p>In order add authentication functionalities to the application, first add the next-auth session provider to _app.js as follows.</p>\n<a href=\"https://medium.com/media/88f87cbd2917d6fde6d2e71461de39de/href\">https://medium.com/media/88f87cbd2917d6fde6d2e71461de39de/href</a><p>In index.js retrieve the user session object under getServerSideProps.</p>\n<pre>export async function getServerSideProps(context) {</pre>\n<pre>   return {</pre>\n<pre>      props: {</pre>\n<pre>          session: await getSession(context),</pre>\n<pre>      },</pre>\n<pre>    }</pre>\n<pre>}</pre>\n<p>Then you can access the session from your Next.JS page using</p>\n<blockquote><em>const { data: session, status } = useSession()</em></blockquote>\n<p>This session object can be used to access user information.</p>\n<p>Also to sign in, can invoke following function.</p>\n<blockquote>signIn(“asgardeo”, { callbackUrl: “/” })</blockquote>\n<p><strong>Cheers..!! You have implemented authentication in your next.js application </strong>🎉</p>\n<p>Hope you have gained some knowledge on developing secured nextjs application using NextAuth and Asgardeo.</p>\n<p>You can find below the Next.js sample application with discussed functionalities.</p>\n<p><a href=\"https://github.com/yathindrakodithuwakku/asgardeo-next-demo\">GitHub - yathindrakodithuwakku/asgardeo-next-demo</a></p>\n<blockquote>\n<strong>Secure your web apps using Asgardeo — </strong><a href=\"https://wso2.com/asgardeo/\"><strong>Click here to start for free</strong></a>\n</blockquote>\n<p>Further you can deploy this app to <a href=\"https://vercel.com/\">vercel</a> with few clicks by also adding the mentioned environment variables in the vercel dashboard. ;-)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4c6ec1b551ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/identity-beyond-borders/secure-your-next-js-application-with-asgardeo-and-next-auth-4c6ec1b551ea\">Secure your Next.JS Application with Asgardeo and Next-Auth</a> was originally published in <a href=\"https://medium.com/identity-beyond-borders\">Identity Beyond Borders</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
        "enclosure": {},
        "categories": [
          "authentication",
          "asgardeo",
          "nextjs",
          "wso2",
          "nextauth"
        ]
      }
    ]
  }